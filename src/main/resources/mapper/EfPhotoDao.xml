<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bear.reseeding.dao.EfMediaDao">

    <resultMap type="com.bear.reseeding.entity.EfPhoto" id="EfPhotoMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="mark" column="mark" jdbcType="VARCHAR"/>
        <result property="path" column="path" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
        <result property="pathScale" column="path_scale" jdbcType="VARBINARY"/>
        <result property="size" column="size" jdbcType="DOUBLE"/>
        <result property="sizeScale" column="size_scale" jdbcType="DOUBLE"/>
        <result property="imageTag" column="image_tag" jdbcType="VARBINARY"/>
        <result property="deviceId" column="deviceId" jdbcType="VARBINARY"/>
        <result property="type" column="type" jdbcType="INTEGER"/>
        <result property="towerMark" column="tower_mark" jdbcType="VARCHAR"/>
        <result property="formats" column="formats" jdbcType="VARCHAR"/>
        <result property="lat" column="lat" jdbcType="DOUBLE"/>
        <result property="lng" column="lng" jdbcType="DOUBLE"/>
    </resultMap>

    <delete id="deletePhotoBytowermark">
        DELETE FROM ef_photo WHERE tower_mark = #{towerMark}
    </delete>

    <delete id="delectphotoById">
        DELETE FROM ef_photo WHERE id = #{id}
    </delete>

    <select id="queryDistance" resultMap="EfPhotoMap">
        select * from ef_photo ORDER BY ST_Distance_Sphere(POINT(lng, lat), POINT(#{lng}, #{lat}))
    </select>

<!--    SELECT *-->
<!--    FROM ef_photo-->
<!--    WHERE ST_Distance_Sphere(POINT(lng, lat), POINT('112.25615555555555', '32.021336')) <= 10-->
<!--    ORDER BY ST_Distance_Sphere(POINT(lng, lat), POINT('112.25615555555555', '32.021336'))-->
<!--    LIMIT 1;-->
    <select id="queryDistanceWithDis" resultMap="EfPhotoMap">
        SELECT *
        FROM ef_photo
        WHERE ST_Distance_Sphere(POINT(lng, lat), POINT(#{lng}, #{lat})) &lt;= #{dis}
        ORDER BY ST_Distance_Sphere(POINT(lng, lat), POINT(#{lng}, #{lat}))
        LIMIT 1;
    </select>

    <select id="getPhotosByTowerId" resultMap="EfPhotoMap">
        SELECT * FROM ef_photo WHERE tower_id = #{towerId}
    </select>

    <select id="getPhotosByTowerMark" resultMap="EfPhotoMap">
        SELECT * FROM ef_photo WHERE tower_mark = #{towerMark} Order By create_time DESC
    </select>

    <select id="getPhotosByTowerMark2" resultMap="EfPhotoMap">
        SELECT * FROM ef_photo WHERE tower_mark LIKE CONCAT('%', #{towerMark}, '%')  Order By create_time DESC limit 20
    </select>

    <select id="getPhotolist" resultMap="EfPhotoMap">
        select * from ef_photo
        <where>
            <if test="mark!=null">
                tower_mark LIKE CONCAT('%', #{mark}, '%')
            </if>
            <if test="1==1">
                AND create_time BETWEEN #{startDate} AND #{endDate}
            </if>
        </where>
        ORDER BY create_time DESC
    </select>



<!--    getPhotosByTowerMark2-->

    <!--新增所有列 返回的通常是新插入数据行的主键值，并将其赋值给在 keyProperty 中指定的属性-->
    <insert id="insertPhoto" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO ef_photo (mark, path, create_time, path_scale, size, size_scale, image_tag, device_id, type, tower_mark, formats, lat, lng)
        VALUES (#{mark}, #{path}, #{createTime}, #{pathScale}, #{size}, #{sizeScale}, #{imageTag}, #{deviceId}, #{type}, #{towerMark}, #{formats}, #{lat}, #{lng})

    </insert>


</mapper>

